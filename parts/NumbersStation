====================================================================================================
Run Your Own Numbers Station
(all thanks to this article https://linuxcoffee.com/numbers/ for the ideas and code)
====================================================================================================


makepad.py
---------------------
#!/usr/bin/env python

import sys
import os.path
import zipfile
from lxml import etree
from random import randint
from binascii import hexlify as _hexlify

# source of random data
#randdev = '/dev/urandom'
randdev = '/dev/random'
#randdev = '/dev/hwrng'
#randdev = '/var/run/rtl_entropy.fifo'

# 3 digit book id
#id = '%03d' % randint(0, 999)

# 2 digit book id with 1 digit checksum
id = '%02d' % randint(0, 99)
id += str((10 - int(id[0]) - int(id[1])) % 10)

def chartodigit(char):
  seed = int(_hexlify(char), 16)
  max = str(256**len(char)-1)
  count = len(max)
  for i in range(1, count):
    div = int(max[:i].ljust(count, '0'))
    if seed < div:
      return str(seed).zfill(count-i)[-(count-i):]
  return ''

infile = 'otp-template.odt'
outfile = 'otp-in-' + id + '.odt'

if os.path.exists(outfile):
  print >> sys.stderr, outfile, 'already exists'
  sys.exit(1)

# get 4125 digits from 1713 bytes
rng = open(randdev, 'rb')
digits = ''
for i in range(6):
  digits += chartodigit(rng.read(267))
digits += chartodigit(rng.read(49))
digits += chartodigit(rng.read(49))
digits += chartodigit(rng.read(13))
while len(digits) < 4125:
  digits += chartodigit(rng.read(5))
rng.close
digits = digits[:4125]

# add spaces every 5 digits
n = 5
temp = ''
for i in range(0, len(digits), n):
  temp += digits[i:i+n] + ' '
digits = temp

# split into 275 digit blocks
n = 330	# 275 digits + 55 spaces
pages = [digits[i:i+n] for i in range(0, len(digits), n)]

# sort pages
pages.sort()

# print
#order = [6, 10, 14, 0, 3, 7, 11, 1, 4, 8, 12, 2, 5, 9, 13]
#for i in order:
#  print '\n','\n',pages[i]

# open zip files
template = zipfile.ZipFile(infile)
otp = zipfile.ZipFile(outfile, 'w', zipfile.ZIP_DEFLATED)

# parse template
content = etree.parse(template.open('content.xml'))

# replace text
text = content.xpath('//text:p', namespaces={'text': 'urn:oasis:names:tc:opendocument:xmlns:text:1.0'})
for e in text:
  if e.text != None:
    # replace pages
    if e.text[:4] == 'PAGE':
      e.text = pages[int(e.text[4:])]
  for c in e:
    # replace book number
    if c.tail == '??? ':
      c.tail = id + ' '

# save new book
for item in template.infolist():
  buffer = template.read(item.filename)
  if (item.filename != 'content.xml'):
    otp.writestr(item, buffer)
  else:
    otp.writestr('content.xml', etree.tostring(content, xml_declaration=True, encoding='UTF-8'))

# close files
template.close()
otp.close()


--------------------------
ct37c.php
---------------------------
#!/usr/bin/php
<?php

$input = strtolower(file_get_contents('php://stdin'));

/*
CT-37c
  | 0    1    2    3    4    5    6    7    8    9
  +---------------------------------------------------
  | code A    E    I    N    O    T
 7| B    C    D    F    G    H    J    K    L    M
 8| P    Q    R    S    U    V    W    X    Y    Z
 9| fig  .    :    '    ()   +    -    =    req  sp

* for code
& for req
*/
$letters = array('a', 'e', 'i', 'n', 'o', 't', 'b',  'c',  'd',  'f',  'g',  'h',  'j',  'k',  'l',  'm',  'p',  'q',  'r',  's',  'u',  'v',  'w',  'x',  'y',  'z',  '.',  ':',  ';',  '"',  "'",  ',',  '(',  ')',  '+',  '-',  '=',  '&',  ' ', PHP_EOL);
$numbers = array('1', '2', '3', '4', '5', '6', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '91', '92', '92', '93', '93', '93', '94', '94', '95', '96', '97', '98', '99');

// replace numbers and codes
$strlen = strlen($input);
$temp   = '';
$fig = false;
for ($i=0; $i<$strlen; $i++) {
  // number
  if (is_numeric($input[$i])) {
    if (!$fig) {
      $temp .= '90';
      $fig = true;
    }
    $temp .= $input[$i] . $input[$i] . $input[$i];
    if ($i+1 < $strlen) {
      if (!is_numeric($input[$i+1])) {
        $temp .= '90';
        $fig = false;
      }
    } else if ($fig) {
      $temp .= '90';
    }

  // code
  } else if ($input[$i] == '*') {
    $temp .= '0' . substr($input, $i+1, 3);
    $i += 3;
  // anything else
  } else {
    $temp .= $input[$i];
  }
}
$input = $temp;

$output = str_replace($letters, $numbers, $input);

// pad end with 9s
$padsize = strlen($output) % 5;
if ($padsize != 0) {
  $pad = str_pad('', 5-$padsize, '9');
  $output .= $pad;
}

echo chunk_split($output, 5, ' ') . PHP_EOL;



